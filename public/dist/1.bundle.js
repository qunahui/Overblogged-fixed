(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{174:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var a=e[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}return function(e,n,a){return n&&t(e.prototype,n),a&&t(e,a),e}}(),r=n(1),o=d(r),l=n(471),i=n(612),u=d(n(613)),s=n(59);n(614);var c=d(n(615));function d(t){return t&&t.__esModule?t:{default:t}}function p(t){return function(){var e=t.apply(this,arguments);return new Promise((function(t,n){return function a(r,o){try{var l=e[r](o),i=l.value}catch(t){return void n(t)}if(!l.done)return Promise.resolve(i).then((function(t){a("next",t)}),(function(t){a("throw",t)}));t(i)}("next")}))}}var m=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));f.call(n);var a=l.EditorState.createEmpty();if(t.blog){var r=(0,c.default)(t.blog.content),o=l.ContentState.createFromBlockArray(r.contentBlocks);a=l.EditorState.createWithContent(o)}return n.state={isUpdating:!!t.isUpdating,description:t.blog?t.blog.description:"",editorState:a,htmlMeta:t.blog?t.blog.meta:[],htmlContent:t.blog?t.blog.content:null,title:t.blog?t.blog.title:"",thumbnail:t.blog?t.blog.thumbnail:null},n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),a(e,[{key:"componentDidMount",value:function(){this.props.isUpdating&&console.log(this.state)}},{key:"render",value:function(){var t=this.state.editorState;return o.default.createElement("form",{onSubmit:this.onSubmit},o.default.createElement("div",{className:"input-group"},o.default.createElement("label",null,"Add title for your blog: "),o.default.createElement("input",{type:"text",value:this.state.title,onChange:this.handleTitleChange}),this.state.title?o.default.createElement("p",{className:"inlineMessage__success"},"Saved!"):null),o.default.createElement("div",{className:"input-group"},o.default.createElement("label",null,"Add description for your blog: "),o.default.createElement("input",{type:"text",value:this.state.description,onChange:this.handleDescriptionChange}),this.state.description?o.default.createElement("p",{className:"inlineMessage__success"},"Saved!"):null),o.default.createElement("div",{className:"input-group"},o.default.createElement("label",null,"Add your thumbnail for your blog: "),o.default.createElement("input",{type:"file",onChange:this.handleThumbNailChange}),this.state.thumbnail?o.default.createElement("p",{className:"inlineMessage__success"},"Saved!"):null),o.default.createElement("div",{className:"input-group",id:"meta-group"},o.default.createElement("label",null,"Add meta data for your blog: "),o.default.createElement("input",{type:"hidden",value:"1",id:"total_meta"}),o.default.createElement("button",{onClick:this.add,className:"button button--darkpink button-small"},"Add"),o.default.createElement("button",{onClick:this.remove,className:"button button--darkpink button-small"},"Remove")),o.default.createElement(i.Editor,{placeholder:"Create your blog here....",editorState:t,wrapperClassName:"demo-wrapper",editorClassName:"demo-editor editor-border",onEditorStateChange:this.onEditorStateChange,toolbar:{image:{previewImage:!0,uploadEnabled:!0,uploadCallback:this.uploadCallback}},toolbarStyle:{color:"black",position:"fixed",left:"10vw",top:"30vh",width:"20%"}}),o.default.createElement("button",{className:"button button-pinkwhite"},"Save blog"))}}]),e}(r.Component),f=function(){var t,e,n,a=this;this.onEditorStateChange=function(t){var e=(0,u.default)((0,l.convertToRaw)(t.getCurrentContent()));a.setState({editorState:t,htmlContent:e})},this.uploadImg=(t=p(regeneratorRuntime.mark((function t(e){var n,r;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=e.name+"__"+Date.now(),r=void 0,t.next=4,s.storage.ref("images/"+n).put(e);case 4:return t.next=6,s.storage.ref("images").child(n).getDownloadURL().then((function(t){r=t}));case 6:return t.abrupt("return",r);case 7:case"end":return t.stop()}}),t,a)}))),function(e){return t.apply(this,arguments)}),this.uploadCallback=(e=p(regeneratorRuntime.mark((function t(e){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=void 0,t.next=3,a.uploadImg(e).then((function(t){n=t}));case 3:return t.abrupt("return",Promise.resolve({data:{link:n}}));case 4:case"end":return t.stop()}}),t,a)}))),function(t){return e.apply(this,arguments)}),this.handleTitleChange=function(t){a.setState({title:t.target.value})},this.handleDescriptionChange=function(t){a.setState({description:t.target.value})},this.handleThumbNailChange=function(t){t.preventDefault(),a.setState({thumbnail:t.target.files[0]}),console.log(t.target.files[0])},this.onSubmit=(n=p(regeneratorRuntime.mark((function t(e){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(e.preventDefault(),n=void 0,a.props.isUpdating){t.next=5;break}return t.next=5,a.uploadImg(a.state.thumbnail).then((function(t){n=t}));case 5:a.setMetaState(),a.props.onSubmit({description:a.state.description,content:a.state.htmlContent,meta:a.state.htmlMeta,title:a.state.title,thumbnail:a.props.isUpdating?a.state.thumbnail:n});case 7:case"end":return t.stop()}}),t,a)}))),function(t){return n.apply(this,arguments)}),this.add=function(t){t.preventDefault();var e=parseInt($("#total_meta").val())+1,n="<div id='meta_"+e+"'  class='input-group'><label>Name: </label> <input type='text' id='metaName_"+e+"' required/> <label>Content: </label> <input type='text' id='metaContent_"+e+"'required/></div>";$("#meta-group").append(n),$("#total_meta").val(e)},this.setMetaState=function(){for(var t=$("input[id^='metaName_']"),e=$("input[id^='metaContent_']"),n=[].concat(function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(a.state.htmlMeta)),r=0;r<t.length;r++){var o={name:$(t[r]).val(),content:$(e[r]).val()};n.push(o)}a.setState({htmlMeta:n}),alert("saved")},this.remove=function(){var t=$("#total_meta").val();t>1&&($("#meta_"+t).remove(),$("#total_meta").val(t-1))}};e.default=m}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,